Index: external/mit/lua/dist/src/lauxlib.c
===================================================================
RCS file: /cvsroot/src/external/mit/lua/dist/src/lauxlib.c,v
retrieving revision 1.4
diff -u -r1.4 lauxlib.c
--- external/mit/lua/dist/src/lauxlib.c	2 Feb 2015 14:03:05 -0000	1.4
+++ external/mit/lua/dist/src/lauxlib.c	18 Aug 2015 01:03:07 -0000
@@ -243,6 +243,24 @@
     return 3;
   }
 }
+#else /* _KERNEL */
+LUALIB_API int luaL_fileresult (lua_State *L, int stat, const char *fname) {
+  if (stat) {
+    lua_pushboolean(L, 1);
+    return 1;
+  }
+  else {
+    lua_pushnil(L);
+    if (fname)
+	  //XXX better error message?
+      lua_pushfstring(L, "%s: %s", fname, "error opening the file");
+    else
+      lua_pushstring(L, "error opening the file");
+	//XXX generic error code
+    lua_pushinteger(L, -1);
+    return 3;
+  }
+} 
 #endif
 
 
Index: external/mit/lua/dist/src/lauxlib.h
===================================================================
RCS file: /cvsroot/src/external/mit/lua/dist/src/lauxlib.h,v
retrieving revision 1.3
diff -u -r1.3 lauxlib.h
--- external/mit/lua/dist/src/lauxlib.h	2 Feb 2015 14:03:05 -0000	1.3
+++ external/mit/lua/dist/src/lauxlib.h	18 Aug 2015 01:03:07 -0000
@@ -71,8 +71,8 @@
 LUALIB_API int (luaL_checkoption) (lua_State *L, int arg, const char *def,
                                    const char *const lst[]);
 
-#ifndef _KERNEL
 LUALIB_API int (luaL_fileresult) (lua_State *L, int stat, const char *fname);
+#ifndef _KERNEL
 LUALIB_API int (luaL_execresult) (lua_State *L, int stat);
 #endif
 
@@ -182,7 +182,6 @@
 
 
 
-#ifndef _KERNEL
 /*
 ** {======================================================
 ** File handles for IO library
@@ -197,6 +196,7 @@
 
 #define LUA_FILEHANDLE          "FILE*"
 
+#ifndef _KERNEL
 
 typedef struct luaL_Stream {
   FILE *f;  /* stream (NULL for incompletely created streams) */
@@ -204,6 +204,16 @@
 } luaL_Stream;
 
 /* }====================================================== */
+#else /* _KERNEL */
+
+typedef file_t FILE;
+
+typedef struct luaL_Stream {
+  file_t *f;  /* stream (NULL for incompletely created streams) */
+  int fd;	/* quick and dirty fix... how can i get an fd from file_t? */
+  lua_CFunction closef;  /* to close stream (NULL for closed streams) */
+} luaL_Stream;
+ 
 #endif
 
 
